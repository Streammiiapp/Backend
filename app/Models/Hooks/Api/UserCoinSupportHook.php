<?php

namespace App\Models\Hooks\Api;
use App\Models\{User,Post,Notification,NotificationSetting,Follower,UserCoinSupport};

class UserCoinSupportHook
{
    private $_model;

    public function __construct($model)
    {
        $this->_model = $model;
    }

    /*
   | ----------------------------------------------------------------------
   | Hook for manipulate query of index result
   | ----------------------------------------------------------------------
   | @query   = current sql query
   | @request = laravel http request class
   |
   */
    public function hook_query_index(&$query,$request, $slug='')
    {
        $query->with(['users','sender','reciever']);
    }

    /*
    | ----------------------------------------------------------------------
    | Hook for manipulate data input before add data is execute
    | ----------------------------------------------------------------------
    | @arr
    |
    */
    public function hook_before_add($request,&$postdata)
    {
        $postdata['slug'] = $postdata['receiver_id'].time();
        $postdata['sender_id'] = $request['user']->id;
    }

    /*
    | ----------------------------------------------------------------------
    | Hook for execute command after add public static function called
    | ----------------------------------------------------------------------
    | @record
    |
    */
    public function hook_after_add($request,$record)
    {

        $getGeneratedPostId = Post::autoGeneratedPost($record->sender_id,$record->receiver_id,$record->coins);
        UserCoinSupport::where('id',$record->id)->update(['generated_post_id'=>$getGeneratedPostId->id]);
        // print_r($getGeneratedPostId); die;



        User::where('id',$record->receiver_id)
        ->increment('total_coins',$record->coins);
        User::where('id',$record->sender_id)
        ->decrement('total_coins',$record->coins);
        Post::where('id',$record->post_id)
        ->increment('support_coin',$record->coins);
          //////support notification///
          $targetUsers = User::getUserApiTokenByID($record->receiver_id);
          $userBadge   = Notification::getBadge($record->receiver_id);
          if (count($targetUsers) > 0) {
              if ($request['user']->id != $targetUsers[0]->id) {
                  $getNotificationSetting = NotificationSetting::getSetting($targetUsers[0]->id);
                  if ($getNotificationSetting['Received_Tokens'] == 1) {
                    $getRequestCount = Follower::getRequestCount($targetUsers[0]->id);

                      $notification_data = [
                          'actor'            => $request['user'],
                          'actor_type'      => 'users',
                          'target'           => $targetUsers,
                          'target_type'      => 'users',
                          'title'            => env('APP_NAME'),
                          'message'          => "".$request['user']->name." user supported with ".$record->coins." tokens.",
                          'reference_id'     => $record->post_id,
                          'reference_module' => 'support_artist',
                          'redirect_link'    => NULL,
                          'badge'            => $userBadge
                      ];
                      $custom_data = [
                          'record_id'     => $record->post_id,
                          'redirect_link' => NULL,
                          'identifier'    => 'support_artist',
                          'request_count' => $getRequestCount,
                      ];
                      Notification::sendPushNotification('support_artist',$notification_data,$custom_data,$targetUsers[0]->device_type);
                  }
              }
          }
    }

    /*
    | ----------------------------------------------------------------------
    | Hook for manipulate data input before update data is execute
    | ----------------------------------------------------------------------
    | @request  = http request object
    | @postdata = input post data
    | @id       = current id
    |
    */
    public function hook_before_edit($request, $slug, &$postData)
    {

    }

    /*
    | ----------------------------------------------------------------------
    | Hook for execute command after edit public static function called
    | ----------------------------------------------------------------------
    | @request  = Http request object
    | @$slug    = $slug
    |
    */
    public function hook_after_edit($request, $slug) {
        //Your code here
    }

    /*
    | ----------------------------------------------------------------------
    | Hook for execute command before delete public static function called
    | ----------------------------------------------------------------------
    | @request  = Http request object
    | @$id      = record id = int / array
    |
    */
    public function hook_before_delete($request, $slug) {
        //Your code here

    }

    /*
    | ----------------------------------------------------------------------
    | Hook for execute command after delete public static function called
    | ----------------------------------------------------------------------
    | @$request       = Http request object
    | @records        = deleted records
    |
    */
    public function hook_after_delete($request,$records) {
        //Your code here
    }

    public function create_cache_signature($request)
    {
        $cache_params = $request->except(['user','api_token']);
        return 'ArtistTypeHook' . md5(implode('',$cache_params));
    }
}
